// <auto-generated />
using System;
using AsistMedAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AsistMedAPI.Migrations
{
    [DbContext(typeof(AsistMedContext))]
    [Migration("20250812051856_Auth_Usuarios_y_RelacionPaciente2")]
    partial class AuthUsuariosyRelacionPaciente2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AsistMedAPI.Models.EvaluacionGI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("antecedente_colitis")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_gastritis")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_ulcera")
                        .HasColumnType("text");

                    b.Property<string>("cambios_deposiciones")
                        .HasColumnType("text");

                    b.Property<string>("diarrea")
                        .HasColumnType("text");

                    b.Property<string>("distension_abdominal")
                        .HasColumnType("text");

                    b.Property<string>("dolor_abdominal")
                        .HasColumnType("text");

                    b.Property<int>("duracion_sintomas_dias")
                        .HasColumnType("integer");

                    b.Property<string>("infecciones_recientes")
                        .HasColumnType("text");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<string>("perdida_apetito")
                        .HasColumnType("text");

                    b.Property<string>("reflujo_gastroesofagico")
                        .HasColumnType("text");

                    b.Property<string>("sangrado_digestivo")
                        .HasColumnType("text");

                    b.Property<string>("vomitos")
                        .HasColumnType("text");

                    b.Property<string>("zona_dolor_abdominal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionGI");
                });

            modelBuilder.Entity("AsistMedAPI.Models.EvaluacionGeneralMed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("alergias_conocidas")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_eda")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_tabaquismo")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_uso_ains")
                        .HasColumnType("text");

                    b.Property<string>("antecedentes_diabetes_familiar")
                        .HasColumnType("text");

                    b.Property<string>("fatiga")
                        .HasColumnType("text");

                    b.Property<string>("fatiga_2")
                        .HasColumnType("text");

                    b.Property<string>("nauseas")
                        .HasColumnType("text");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<string>("perdida_peso_no_intencional")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionGeneralMed");
                });

            modelBuilder.Entity("AsistMedAPI.Models.EvaluacionNutricion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("cantidadAguaDia")
                        .HasColumnType("integer");

                    b.Property<int>("cantidad_comidas_dia")
                        .HasColumnType("integer");

                    b.Property<string>("frecuencia_ultraprocesados")
                        .HasColumnType("text");

                    b.Property<string>("frutas_verduras")
                        .HasColumnType("text");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<string>("perdida_peso_nutricion")
                        .HasColumnType("text");

                    b.Property<string>("sintoma_deficiencia_nutricional")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EvaluacionNutricion");
                });

            modelBuilder.Entity("AsistMedAPI.Models.Paciente", b =>
                {
                    b.Property<string>("Dni")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<string>("direccion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("edad")
                        .HasColumnType("integer");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("telefono")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Dni");

                    b.HasIndex("UsuarioId");

                    b.ToTable("paciente");
                });

            modelBuilder.Entity("AsistMedAPI.Models.PrediccionIA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DiagnosticoFinal")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticoGastro")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticoMedico")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticoNutri")
                        .HasColumnType("text");

                    b.Property<string>("Dni")
                        .HasColumnType("text");

                    b.Property<string>("Porcentaje")
                        .HasColumnType("text");

                    b.Property<string>("alergias_conocidas")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_colitis")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_eda")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_gastritis")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_tabaquismo")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_ulcera")
                        .HasColumnType("text");

                    b.Property<string>("antecedente_uso_ains")
                        .HasColumnType("text");

                    b.Property<string>("antecedentes_diabetes_familiar")
                        .HasColumnType("text");

                    b.Property<string>("cambios_deposiciones")
                        .HasColumnType("text");

                    b.Property<int>("cantidadAguaDia")
                        .HasColumnType("integer");

                    b.Property<int>("cantidad_comidas_dia")
                        .HasColumnType("integer");

                    b.Property<string>("diarrea")
                        .HasColumnType("text");

                    b.Property<string>("distension_abdominal")
                        .HasColumnType("text");

                    b.Property<string>("dolor_abdominal")
                        .HasColumnType("text");

                    b.Property<int>("duracion_sintomas_dias")
                        .HasColumnType("integer");

                    b.Property<int>("edad")
                        .HasColumnType("integer");

                    b.Property<string>("fatiga")
                        .HasColumnType("text");

                    b.Property<string>("fatiga_2")
                        .HasColumnType("text");

                    b.Property<int>("frecuencia_cardiaca")
                        .HasColumnType("integer");

                    b.Property<int>("frecuencia_respiratoria")
                        .HasColumnType("integer");

                    b.Property<string>("frecuencia_ultraprocesados")
                        .HasColumnType("text");

                    b.Property<string>("frutas_verduras")
                        .HasColumnType("text");

                    b.Property<int>("glucosa_capilar")
                        .HasColumnType("integer");

                    b.Property<float>("imc")
                        .HasColumnType("real");

                    b.Property<string>("infecciones_recientes")
                        .HasColumnType("text");

                    b.Property<string>("nauseas")
                        .HasColumnType("text");

                    b.Property<string>("perdida_apetito")
                        .HasColumnType("text");

                    b.Property<string>("perdida_peso_no_intencional")
                        .HasColumnType("text");

                    b.Property<string>("perdida_peso_nutricion")
                        .HasColumnType("text");

                    b.Property<float>("peso")
                        .HasColumnType("real");

                    b.Property<int>("presion_diastolica")
                        .HasColumnType("integer");

                    b.Property<int>("presion_sistolica")
                        .HasColumnType("integer");

                    b.Property<string>("reflujo_gastroesofagico")
                        .HasColumnType("text");

                    b.Property<string>("sangrado_digestivo")
                        .HasColumnType("text");

                    b.Property<int>("saturacion_oxigeno")
                        .HasColumnType("integer");

                    b.Property<string>("sexo")
                        .HasColumnType("text");

                    b.Property<string>("sintoma_deficiencia_nutricional")
                        .HasColumnType("text");

                    b.Property<float>("talla")
                        .HasColumnType("real");

                    b.Property<float>("temperatura")
                        .HasColumnType("real");

                    b.Property<string>("variable_auxiliar")
                        .HasColumnType("text");

                    b.Property<string>("vomitos")
                        .HasColumnType("text");

                    b.Property<string>("zona_dolor_abdominal")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PrediccionesIA");
                });

            modelBuilder.Entity("AsistMedAPI.Models.SignosVitales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VariableAuxiliar")
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha_registro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("frecuencia_cardiaca")
                        .HasColumnType("integer");

                    b.Property<int>("frecuencia_respiratoria")
                        .HasColumnType("integer");

                    b.Property<int>("glucosa_capilar")
                        .HasColumnType("integer");

                    b.Property<float>("imc")
                        .HasColumnType("real");

                    b.Property<float>("peso")
                        .HasColumnType("real");

                    b.Property<int>("presion_diastolica")
                        .HasColumnType("integer");

                    b.Property<int>("presion_sistolica")
                        .HasColumnType("integer");

                    b.Property<int>("saturacion_oxigeno")
                        .HasColumnType("integer");

                    b.Property<float>("talla")
                        .HasColumnType("real");

                    b.Property<float>("temperatura")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SignosVitales");
                });

            modelBuilder.Entity("AsistMedAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreadoEn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("AsistMedAPI.Models.Paciente", b =>
                {
                    b.HasOne("AsistMedAPI.Models.Usuario", "Usuario")
                        .WithMany("Pacientes")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AsistMedAPI.Models.Usuario", b =>
                {
                    b.Navigation("Pacientes");
                });
#pragma warning restore 612, 618
        }
    }
}
